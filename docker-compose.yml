version: '2.4'

services:
  authentic:
    build:
      context: sso
      dockerfile: Dockerfile
    image: wc/sso:latest
    environment:
      - AGENTS_HOSTNAME=agents.wc.localhost
      - USAGERS_HOSTNAME=usagers.wc.localhost
    mem_limit: 2048m
    expose:
      - 80
    extra_hosts:
      hobo-agents.wc.localhost:
        127.0.0.1
      agents.wc.localhost:
        127.0.0.1
      combo-agents.wc.localhost:
        127.0.0.1
      backoffice-agents.wc.localhost:
        127.0.0.1
      hobo-usagers.wc.localhost:
        127.0.0.1
      usagers.wc.localhost:
        127.0.0.1
      combo-usagers.wc.localhost:
        127.0.0.1
      backoffice-usagers.wc.localhost:
        127.0.0.1
    volumes:
      - ./data/hobo:/var/lib/hobo/tenants
      - ./data/combo:/var/lib/combo/tenants
      - ./data/authentic2-multitenant:/var/lib/authentic2-multitenant/tenants
      - ./config/combo/settings.d:/etc/combo/settings.d
      - ./config/authentic2-multitenant:/etc/authentic2-multitenant
      - ./config/hobo/settings.d:/etc/hobo/settings.d
      - ./config/hobo-agent/settings.d:/etc/hobo-agent/settings.d
      - ./config/nginx:/etc/nginx/sites-available
      - ./src:/opt/publik
      - ./sso/agents.json:/agents.json
      - ./sso/usagers.json:/usagers.json
      - ./sso/index.json:/index.json
    command: >
      /bin/sh -c "
        echo Waiting for rabbitmq and postgres services start...;
        while ! nc -z rabbitmq 5672;
        do
          sleep 3;
        done;
        echo Connected!;
        sleep 1;
        /run.sh;
      "
    depends_on:
      - database
      - rabbitmq
      - memcached
      - reverse-proxy
    labels:
      - "traefik.http.routers.authentic.rule=HostRegexp(`wc.localhost`, `{subdomain:[a-z-]+}.wc.localhost`)"
  rabbitmq:
    image: rabbitmq
    hostname: rabbitmq
  database:
    image: postgres
    hostname: database
    volumes:
      - ./data/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
      - pgdata:/var/lib/postgresql/data
    environment:
      - "POSTGRES_PASSWORD=password"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  memcached:
    image: memcached
    hostname: memcached
  reverse-proxy:
    image: traefik:2.2
    command:
      #- "--log.level=DEBUG"
      - '--api.insecure=true'
      - '--providers.docker'
      - '--entryPoints.web.address=:80'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  pgdata:
