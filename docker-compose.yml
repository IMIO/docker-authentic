version: '2.4'

services:
  base:
    build:
      context: sso
      dockerfile: Dockerfile
    image: wc/sso:latest
    environment:
      - AGENTS_HOSTNAME=agents.traefik.me
      - USAGERS_HOSTNAME=usagers.traefik.me
      - environment_label=dev
      - INSTANCE_NAME=authentic80
      - CSRF_FAILURE_VIEW='django.views.csrf.csrf_failure'
    mem_limit: 2048m
    expose:
      - 80
    # extra_hosts:
    #   hobo-agents.traefik.me:
    #     127.0.0.1
    #   agents.traefik.me:
    #     127.0.0.1
    #   combo-agents.traefik.me:
    #     127.0.0.1
    #   backoffice-agents.traefik.me:
    #     127.0.0.1
    #   hobo-usagers.traefik.me:
    #     127.0.0.1
    #   usagers.traefik.me:
    #     127.0.0.1
    #   combo-usagers.traefik.me:
    #     127.0.0.1
    #   backoffice-usagers.traefik.me:
    #     127.0.0.1
    volumes:
      - ./data/hobo:/var/lib/hobo/tenants
      - ./data/combo:/var/lib/combo/tenants
      - ./data/authentic2-multitenant:/var/lib/authentic2-multitenant/tenants
      - ./config/combo/settings.d:/etc/combo/settings.d
      - ./config/authentic2-multitenant/settings.d:/etc/authentic2-multitenant/settings.d
      - ./config/authentic2-multitenant/agents.json:/etc/authentic2-multitenant/agents.json
      - ./config/authentic2-multitenant/usagers.json:/etc/authentic2-multitenant/usagers.json
      - ./config/hobo/settings.d:/etc/hobo/settings.d
      - ./config/hobo-agent/settings.d:/etc/hobo-agent/settings.d
      - ./config/nginx:/etc/nginx/sites-available
      - ./sso/agents.json:/agents.json
      - ./sso/usagers.json:/usagers.json
      - ./sso/agents-index.json:/agents-index.json
      - ./sso/usagers-index.json:/usagers-index.json
      - ./src/scripts:/opt/scripts
      - ./sso/build.sh:/build.sh
      - ./imio-publik-themes/templates:/usr/share/publik/themes/imio/templates
      - ./imio-publik-themes/static:/usr/share/publik/themes/imio/static
    command: tail -f /dev/null
  authentic:
    extends: base
    command: /run.sh
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      memcached:
        condition: service_started
      reverse-proxy:
        condition: service_started
    # networks:
    #   - proxy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "https://agents.traefik.me"]
    #   retries: 50
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentic=true"
  rabbitmq:
    image: rabbitmq
    hostname: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 5
  database:
    image: postgres
    hostname: database
    volumes:
      - ./data/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
      - pgdata:/var/lib/postgresql/data
    environment:
      - "POSTGRES_PASSWORD=password"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h database"]
      interval: 15s
      timeout: 30s
      retries: 50
  memcached:
    image: memcached
    hostname: memcached
  reverse-proxy:
    image: traefik:2.10
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      - ./certs:/etc/ssl/traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik=true"
  monitor:
    extends: base
    command: /prometheus.sh
volumes:
  pgdata:

# networks:
#   proxy:
#     external: true